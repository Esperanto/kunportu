# Code auto-generated by Visual Alchemist version 1.0.6
import sqlalchemy, datetime, json, requests, os
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, DateTime, String, Text, Float, ForeignKey, JSON
from sqlalchemy.dialects.mysql import BIGINT
from sqlalchemy.dialects.mysql import LONGTEXT
from sqlalchemy.orm import sessionmaker, relationship, backref

engine = create_engine(r'sqlite:///app.db', echo=True)
Session = sessionmaker()
Session.configure(bind=engine)
session = Session()
Base = declarative_base()

class Kategorio(Base):
    __tablename__ = "kategorio"
    kategorio_nomo = Column(String, primary_key=True, unique=True, nullable=False)

class Ludo(Base):
    __tablename__ = "ludo"
    ludo_nomo = Column(String, primary_key=True, unique=True, nullable=False)
    bildpado = Column(String)
    ecoj = Column(JSON)

    def as_dict_for_inline(self):
       return {
            "nomo": self.ludo_nomo, "bildo": self.bildpado,
            "priskribo":self.ecoj["priskribo"][:80] if "priskribo" in self.ecoj else ""
       }

class Kunportajxo(Base):
    __tablename__ = "kunportajxo"
    id = Column(Integer, primary_key=True, unique=True, nullable=False)
    chat_id = Column(Integer, primary_key=True, unique=False, nullable=False)
    chat_nomo = Column(String)
    uzanto_id = Column(Integer)
    kategorio = Column(String)
    nomo = Column(String)
    bildpado = Column(String)
    ecoj = Column(JSON)

#get chatIDs last turn
def enpaki(kategorio, grupo, grupnomo, uzanto_id, kunportajxo_nomo, ecoj, bildo=None):
    if kategorio is "ludo" and not session.query(Ludo).filter(Ludo.ludo_nomo==kunportajxo_nomo).one():
        print("Ludo estas nekonata...")
        return False
    session.add(Kunportajxo(chat_id=chat_id,
        chat_nomo=chat_nomo, uzanto_id=uzanto_id,
        kategorio=kategorio, nomo=nomo,
        bildpado=bildpado, ecoj=ecoj
    ))
    return False

def elpaki(kategorio, grupo, grupnomo, uzanto_id, kunportajxo_nomo):
    pass #TODO

def cxiuj_ludoj_json():
    return [ludo.as_dict_for_inline() for ludo in session.query(Ludo).all()]

def createDB():
    Base.metadata.create_all(engine);
    if not os.path.exists('img'): os.makedirs('img')
    session.add(Kategorio(kategorio_nomo="ludo"))
    for ludo in json.load(open("ludoj_seed.json")):
        img_data = requests.get(ludo["bildligilo"]).content
        open("img/" + ludo["nomo"] + '.jpg', 'wb').write(img_data)
        session.add(Ludo(ludo_nomo=ludo["nomo"], bildpado="img/"+ludo["bildligilo"], ecoj=ludo))
    session.commit()
